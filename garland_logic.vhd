-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.


-- Generated by Quartus Prime Version 18.1 (Build Build 625 09/12/2018)
-- Created on Wed Jan 12 22:21:07 2022

LIBRARY ieee;
USE ieee.std_logic_1164.all;


--  Entity Declaration

ENTITY garland_logic IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	GENERIC 
	(  
		delay_max: integer:= 50000000
	); 
	PORT
	(
		i_clk : IN STD_LOGIC;
		button_0 : IN STD_LOGIC;
		button_1 : IN STD_LOGIC;
		green_led : OUT STD_LOGIC_VECTOR  (0 to 3)
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END garland_logic;


--  Architecture Body

ARCHITECTURE garland_logic_architecture OF garland_logic IS

type garland_st_type is (st_idle,st_01,st_02,st_03,st_04,st_11,st_12,st_delay);
signal garland_st: garland_st_type := st_idle;
signal led_cnt:integer range 0 to 5 := 0;
signal delay:integer range 0 to delay_max := 0;

BEGIN
    logic:process(i_clk,button_0,button_1)
    begin
		if button_0 = '0' then
			green_led <= "0000";
			led_cnt <= 0;
			delay <= 0;
        elsif rising_edge(i_clk) then
			case garland_st is
				when st_idle =>
					if led_cnt = 0 then
						garland_st <=st_01;
					elsif led_cnt = 1 then
						garland_st <=st_02;
					elsif led_cnt = 2 then
						garland_st <=st_03;
					elsif led_cnt = 3 then
						garland_st <=st_04;
					elsif led_cnt = 4 then
						garland_st <=st_11;
					elsif led_cnt = 5 then
						garland_st <=st_12;
					end if;

				when st_01 =>
					green_led <= "1000";
					led_cnt <= 1;
					garland_st <=st_delay;

				when st_02 =>
					green_led <= "0100";
					led_cnt <= 2;
					garland_st <=st_delay;

				when st_03 =>
					green_led <= "0010";
					led_cnt <= 3;
					garland_st <=st_delay;
					
				when st_04 =>
					green_led <= "0001";
					led_cnt <= 4;
					garland_st <=st_delay;

				when st_11 =>
					green_led <= "0010";
					led_cnt <= 5;
					garland_st <=st_delay;

				when st_12 =>
					green_led <= "0100";
					led_cnt <= 0;
					garland_st <=st_delay;

				when st_delay =>
					if delay < delay_max then
						delay<=delay+1;
					else
						delay <= 0;
						garland_st <=st_idle;
					end if;

				when others =>
					green_led <= "0011";
			end case;
		end if;
    end process;
END garland_logic_architecture;